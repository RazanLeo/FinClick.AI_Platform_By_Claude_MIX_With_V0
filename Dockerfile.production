# Production Dockerfile for FinClick.AI Frontend
# Multi-stage build for optimal performance and security

# Stage 1: Build Dependencies and Application
FROM node:18-alpine AS builder

# Set build arguments
ARG NODE_ENV=production
ARG REACT_APP_API_URL
ARG REACT_APP_ENVIRONMENT=production
ARG REACT_APP_VERSION

# Set working directory
WORKDIR /app

# Install build dependencies for native modules
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    git \
    && rm -rf /var/cache/apk/*

# Copy package files
COPY package*.json ./
COPY yarn.lock* ./

# Install dependencies
RUN if [ -f yarn.lock ]; then \
        yarn install --frozen-lockfile --production=false; \
    else \
        npm ci --only=production=false; \
    fi

# Copy source code
COPY . .

# Build the application
RUN if [ -f yarn.lock ]; then \
        yarn build; \
    else \
        npm run build; \
    fi

# Remove development dependencies
RUN if [ -f yarn.lock ]; then \
        yarn install --frozen-lockfile --production=true && yarn cache clean; \
    else \
        npm prune --production && npm cache clean --force; \
    fi

# Stage 2: Production Runtime with Nginx
FROM nginx:1.25-alpine AS production

# Install security updates and necessary packages
RUN apk update && apk upgrade && \
    apk add --no-cache \
    curl \
    ca-certificates \
    tzdata \
    && rm -rf /var/cache/apk/*

# Set timezone
ENV TZ=UTC
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# Create non-root user for security
RUN addgroup -g 1001 -S nginx && \
    adduser -S -D -H -u 1001 -h /var/cache/nginx -s /sbin/nologin -G nginx -g nginx nginx

# Copy built application from builder stage
COPY --from=builder --chown=nginx:nginx /app/build /usr/share/nginx/html

# Copy custom nginx configuration
COPY nginx.conf /etc/nginx/nginx.conf
COPY default.conf /etc/nginx/conf.d/default.conf

# Create necessary directories and set permissions
RUN mkdir -p /var/cache/nginx /var/log/nginx /etc/nginx/conf.d && \
    touch /var/run/nginx.pid && \
    chown -R nginx:nginx /var/cache/nginx /var/log/nginx /etc/nginx/conf.d /var/run/nginx.pid /usr/share/nginx/html

# Add health check script
RUN echo '#!/bin/sh' > /usr/local/bin/health-check.sh && \
    echo 'curl -f http://localhost/health || exit 1' >> /usr/local/bin/health-check.sh && \
    chmod +x /usr/local/bin/health-check.sh

# Create health check endpoint
RUN echo '<!DOCTYPE html><html><head><title>Health Check</title></head><body><h1>OK</h1></body></html>' > /usr/share/nginx/html/health.html

# Security: Remove default nginx files that could expose information
RUN rm -f /etc/nginx/conf.d/default.conf.template && \
    rm -f /usr/share/nginx/html/index.html && \
    rm -f /usr/share/nginx/html/50x.html

# Set proper permissions
RUN chmod -R 755 /usr/share/nginx/html && \
    chmod 644 /usr/share/nginx/html/*

# Expose port
EXPOSE 80

# Add labels for better container management
LABEL maintainer="FinClick.AI Team" \
      version="1.0.0" \
      description="FinClick.AI Frontend Production Image" \
      org.opencontainers.image.title="FinClick.AI Frontend" \
      org.opencontainers.image.description="Production-ready React.js frontend for FinClick.AI" \
      org.opencontainers.image.vendor="FinClick.AI" \
      org.opencontainers.image.version="1.0.0"

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD /usr/local/bin/health-check.sh

# Switch to non-root user
USER nginx

# Start nginx
CMD ["nginx", "-g", "daemon off;"]