# Staging Dockerfile for FinClick.AI Frontend
# Balanced between production optimizations and debugging capabilities

# Stage 1: Build Application
FROM node:18-alpine AS builder

# Set staging environment
ARG NODE_ENV=staging
ARG REACT_APP_API_URL
ARG REACT_APP_ENVIRONMENT=staging
ARG REACT_APP_VERSION
ARG REACT_APP_SENTRY_DSN

# Set working directory
WORKDIR /app

# Install build dependencies
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    git \
    && rm -rf /var/cache/apk/*

# Copy package files
COPY package*.json ./
COPY yarn.lock* ./

# Install dependencies
RUN if [ -f yarn.lock ]; then \
        yarn install --frozen-lockfile; \
    else \
        npm ci; \
    fi

# Copy source code
COPY . .

# Build application for staging
RUN if [ -f yarn.lock ]; then \
        yarn build:staging; \
    else \
        npm run build:staging; \
    fi

# Stage 2: Staging Runtime
FROM nginx:1.25-alpine AS staging

# Install staging utilities
RUN apk update && apk upgrade && \
    apk add --no-cache \
    curl \
    ca-certificates \
    tzdata \
    bash \
    jq \
    && rm -rf /var/cache/apk/*

# Set timezone
ENV TZ=UTC
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# Create non-root user
RUN addgroup -g 1001 -S nginx && \
    adduser -S -D -H -u 1001 -h /var/cache/nginx -s /sbin/nologin -G nginx -g nginx nginx

# Copy built application
COPY --from=builder --chown=nginx:nginx /app/build /usr/share/nginx/html

# Copy staging nginx configuration
COPY nginx.staging.conf /etc/nginx/nginx.conf
COPY default.staging.conf /etc/nginx/conf.d/default.conf

# Add staging banner injection script
RUN echo '#!/bin/bash' > /usr/local/bin/inject-staging-banner.sh && \
    echo 'for file in /usr/share/nginx/html/static/js/*.js; do' >> /usr/local/bin/inject-staging-banner.sh && \
    echo '  if [[ -f "$file" ]]; then' >> /usr/local/bin/inject-staging-banner.sh && \
    echo '    sed -i "1i console.log(\"%cðŸš§ STAGING ENVIRONMENT ðŸš§\", \"color: orange; font-size: 20px; font-weight: bold;\");" "$file"' >> /usr/local/bin/inject-staging-banner.sh && \
    echo '  fi' >> /usr/local/bin/inject-staging-banner.sh && \
    echo 'done' >> /usr/local/bin/inject-staging-banner.sh && \
    chmod +x /usr/local/bin/inject-staging-banner.sh

# Add staging overlay
RUN echo '<div id="staging-overlay" style="position: fixed; top: 0; right: 0; background: orange; color: white; padding: 5px 10px; z-index: 9999; font-weight: bold;">STAGING</div>' > /usr/share/nginx/html/staging-overlay.html

# Create staging-specific health check
RUN echo '#!/bin/sh' > /usr/local/bin/health-check.sh && \
    echo 'curl -f http://localhost/health && echo "staging-ok"' >> /usr/local/bin/health-check.sh && \
    chmod +x /usr/local/bin/health-check.sh

# Create health endpoint
RUN echo '<!DOCTYPE html><html><head><title>Staging Health</title></head><body><h1>Staging OK</h1><p>Environment: Staging</p></body></html>' > /usr/share/nginx/html/health.html

# Set up directories and permissions
RUN mkdir -p /var/cache/nginx /var/log/nginx /etc/nginx/conf.d && \
    touch /var/run/nginx.pid && \
    chown -R nginx:nginx /var/cache/nginx /var/log/nginx /etc/nginx/conf.d /var/run/nginx.pid /usr/share/nginx/html

# Security cleanup
RUN rm -f /etc/nginx/conf.d/default.conf.template

# Set permissions
RUN chmod -R 755 /usr/share/nginx/html && \
    chmod 644 /usr/share/nginx/html/*

# Expose port
EXPOSE 80

# Add staging-specific labels
LABEL maintainer="FinClick.AI Team" \
      version="1.0.0-staging" \
      description="FinClick.AI Frontend Staging Image" \
      environment="staging" \
      org.opencontainers.image.title="FinClick.AI Frontend Staging" \
      org.opencontainers.image.description="Staging React.js frontend for FinClick.AI" \
      org.opencontainers.image.vendor="FinClick.AI"

# Health check with staging identifier
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD /usr/local/bin/health-check.sh

# Run staging banner injection and start nginx
USER nginx
CMD ["/bin/sh", "-c", "/usr/local/bin/inject-staging-banner.sh && nginx -g 'daemon off;'"]